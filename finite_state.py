# python script to export finite state machines
#
# Based on a script by Unai Esteban:
#
#     From: Unai Estebanez <unai unainet net>
#     To: dia-list gnome org
#     Subject: python script to export finite state machines
#     Date: Tue, 7 Jul 2009 15:05:10 +0200
#
#     https://mail.gnome.org/archives/dia-list/2009-July/msg00005.html
#
# Changes by Tomas Pospisek <tpo_deb@sourcepole.ch>
#
# Copyright (c) 2009-2012, Unai Estebanez, Tomas Pospisek
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


import dia

class Transition :
    def __init__(self) :
        self.trigger = ""
        self.action = ""
        self.guard = ""
        self.source = ""
        self.target = ""

    def set_source(self, state):
        self.source = state

    def set_target(self, state):
        self.target = state

    def set_action(self, action):
        self.action = action

    def set_trigger(self, trigger):
        self.trigger = trigger

    def set_guard(self, guard):
        self.guard = guard

class State :
    def __init__(self) :
        self.name = ""
        self.iaction = ""
        self.oaction = ""
        self.type = 0
        self.aux = ""

    def set_name(self, name):
        self.name = name

    def set_input_action(self, action):
        if action == "(NULL)":
            self.iaction = ""
        else:
            self.iaction = action

    def set_output_action(self, action):
        if action == "(NULL)":
            self.oaction = ""
        else:
            self.oaction = action

    def set_do_action(self, action):
        if action == "(NULL)":
            self.doaction = ""
        else:
            self.doaction = action

    def set_type(self, type):
        self.type = type

    def set_aux(self, aux):
        self.aux = aux

class TxtDiagramRenderer:
    CODE_PREAMBLE='''
#Machine generated file, do not edit!!!
#Generated by sm_export.py script for DIA
#Format is: <comments zone>EOL[STATES]EOL<state>EOL....<state>EOL[TRANSITIONS]EOL<transition>EOL...<transition>EOLEOF
#Where:
#    <comments zone> is a line that begins with \'#\'
#    <state> is a line with comma separated values: state_name,input_action,output_action
#    <transition> is a line with comma separated values: source_state,target_state,trigger,action
#    [STATES] is states zone begin tag
#    [TRANSITIONS] is transitions zone begin tag
#    EOL means End Of Line and EOF means End Of File\n
#-------------------------------------------------------------------------------
'''
    def __init__(self):
        self.filename = ""
        self.states = {}
        self.transitions = []

    def begin_render (self, data, filename):
        self.filename = filename
        for layer in data.layers :
            for o in layer.objects :
                if o.type.name == "UML - State" :
                    state = State()
                    # State properties are:
                    # [ 'obj_pos',     'obj_bb',      'elem_corner', 'elem_width',
                    #   'elem_height', 'type',        'line_colour', 'fill_colour',
                    #   'text_font',   'text_height', 'text_colour', 'text',
                    #   'entry_action','do_action',   'exit_action' ]

                    # ----- set name
                    state.set_name(o.properties["text"].value.text.strip())

                    # ----- set input action
                    try :
                        p = o.properties["entry_action"].value
                    except :
                        p = None
                    state.set_input_action(str(p))
                     
                    # ----- set output action
                    try :
                        p = o.properties["exit_action"].value
                    except :
                        p = None
                    state.set_output_action(str(p))

                    # ----- set do action
                    try :
                        p = o.properties["do_action"].value
                    except :
                        p = None
                    state.set_do_action(str(p))

                    state.set_type(STANDARD_STATE)
                    self.states[state.name] = state
                #elif o.type.name == "UML - State Term" :
                    # State Term properties are:
                    # [ 'obj_pos',    'obj_bb',      'elem_corner',
                    #   'elem_width', 'elem_height', 'is_final'     ]
                elif o.type.name == "UML - Transition" :
                    # Transition properties are:
                    # [ 'obj_pos',          'obj_bb',         'orth_points',       'orth_orient',
                    #   'orth_autoroute',   'trigger',        'action',            'guard',
                    #   'trigger_text_pos', 'guard_text_pos', 'direction_inverted'                ]
                    transition = Transition()
                    source = o.handles[0].connected_to.object
                    target = o.handles[1].connected_to.object
                    if source.type.name ==  "UML - State Term":
                        if not source.properties["is_final"].value :
                            transition.set_source("INITIAL_STATE")
                    elif source.type.name == "UML - State":
                        transition.set_source(source.properties["text"].value.text)
                    else:
                        transition.set_source("Unknown source")

                    if target.type.name ==  "UML - State Term":
                        if target.properties["is_final"].value :
                            transition.set_target("FINAL_STATE")
                    elif target.type.name == "UML - State":
                        transition.set_target(target.properties["text"].value.text)
                    else:
                        transition.set_source("Unknown target")
                    
                    try:
                        trigger = o.properties["trigger"].value
                    except:
                        trigger = ""
                    transition.set_trigger(str(trigger))

                    try:
                        action = o.properties["action"].value
                    except:
                        action = ""
                    transition.set_action(str(action))

                    try:
                        guard = o.properties["guard"].value
                    except:
                        guard = ""

                    transition.set_guard(str(guard))
                    self.transitions.append(transition)
                   
    def end_render(self) :
        f = open(self.filename, "w")
        f.write(self.CODE_PREAMBLE)
        f.write("[STATES]\n")
        for key in self.states.keys():
            state = self.states[key]
            f.write("%s, %s, %s\n" % (state.name, state.iaction, state.oaction))
        f.write("[TRANSITIONS]\n")
        for transition in self.transitions:
            f.write("%s, %s, %s, %s\n" % (transition.source, transition.target, transition.trigger, transition.action))
        f.close()
        self.states = {}
        self.transitions = []


class CDiagramRenderer(TxtDiagramRenderer):
    CODE_PREAMBLE = '''
// Machine generated file - do not edit!!!
// Generated by sm_export.py script for Dia


configure_statemachine( Stateful_object_t* stm )
{
    // STATES: 'state', 'action'
    //
'''
    TRANSITIONS_PREAMBLE = '''
    // TRANSITIONS: 'src state', 'trigger', 'target state'
    //
'''
    CODE_POSTAMBLE = '''
    return ERR_OK;
}
'''
    def end_render(self) :
        f = open(self.filename, "w")
        f.write(self.CODE_PREAMBLE)

        initial_state = None
        for transition in self.transitions:
            # specialcase initial transition -> create initial state
            if(transition.source == "INITIAL_STATE"):
                initial_state = self.states[transition.target]
                f.write("    return_on_error( add_initial_state( stm, %s, (stf)%s ));\n" %
                    (initial_state.name, initial_state.doaction))

        for key in self.states.keys():
            state = self.states[key]
            # initial_state has already been output
            # TODO: the fact that state can be None looks like a bug to me
            if(state != None and state.name != initial_state.name):
                f.write("    return_on_error( add_state( stm, %s, (stf)%s ));\n" %
                                                       (state.name, state.doaction))
                # (state.name, state.iaction, state.oaction, state.doaction)

        f.write(self.TRANSITIONS_PREAMBLE)

        for transition in self.transitions:
            # specialcase UNIVERSAL - this is a transition that's valid for all states
            if(transition.source == "INITIAL_STATE"):
                    continue # skip the initial state transition
            if(transition.guard == "UNIVERSAL"):
                f.write("    return_on_error( add_universal_transition( stm, %s, %s, %s ));\n" %
                    (transition.source, transition.trigger, transition.target ))
            else:
                f.write("    return_on_error( add_transition( stm, %s, %s, %s ));\n" %
                    (transition.source, transition.trigger, transition.target ))
                #   (transition.source, transition.trigger, transition.target, transition.action))

        f.write(self.CODE_POSTAMBLE)

        f.close()
        self.states = {}
        self.transitions = []

INITIAL_STATE, STANDARD_STATE, FINAL_STATE = range(3)

# dia-python keeps a reference to the renderer class and uses it on demand
dia.register_export("State Machine Textual Dump", "txt", TxtDiagramRenderer())
dia.register_export("State Machine CTstma Dump", "c", CDiagramRenderer())
